import { useCallback, useEffect, useMemo, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { createStore } from 'botframework-webchat';
import { GlobalService } from '../../../helpers/services';
import WebChat from './WebChat';
import { ChatBotIcon } from '../../icons/ChatBotIcon';
import { useRouter } from 'next/router';
import { Locales } from '../../../types/enums';
import { CommonUtils, SessionUtils } from '../../../helpers/utilities';
import { LabelConstants } from '../../../types/i18n.labels';

const ChatBot = () => {
  const { t } = useTranslation();
  const router = useRouter();
  const [loaded, setLoaded] = useState<boolean>(false);
  const [minimized, setMinimized] = useState<boolean>(true);
  const [newMessage, setNewMessage] = useState<boolean>(false);
  const [side, setSide] = useState<string>();
  const [token, setToken] = useState<string>();

  const store = useMemo(() => {
    if (typeof window !== 'undefined') {
      return createStore(
        {},
        ({ dispatch }: any) =>
          (next: any) =>
          (action: any) => {
            if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED') {
              dispatch({
                type: 'WEB_CHAT/SEND_EVENT',
                payload: {
                  name: 'webchat/join',
                  value: {
                    language: window.navigator.language,
                  },
                },
              });
            } else if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {
              if (action.payload.activity.from.role === 'bot') {
                setNewMessage(true);
              }
            }
            return next(action);
          }
      );
    }
  }, []);

  /**
   * This useEffect is used to change direction of popup on language change
   */
  useEffect(() => {
    setSide(router.locale === Locales.AR ? 'left' : 'right');
  }, [router.locale]);

  /**
   * This method is used to fetch Direct Like token
   */
  const handleFetchToken = useCallback(async () => {
    if (!token) {
      let userId: string;
      const user = SessionUtils.getUserDetails();
      if (user) {
        userId = user.UserId;
      } else {
        userId = CommonUtils.getChatBotAnonymousUserId();
      }
      const res = await GlobalService.getDirectLineToken(userId);
      const { token } = res;
      setToken(token);
    }
  }, [token, setToken]);

  /**
   * This method opens the Chat popup
   */
  const handleMaximizeButtonClick = useCallback(async () => {
    setLoaded(true);
    setMinimized(false);
    setNewMessage(false);
  }, []);

  /**
   * This method minimize the Chat popup
   */
  const handleMinimizeButtonClick = useCallback(() => {
    setMinimized(true);
    setNewMessage(false);
  }, [setMinimized, setNewMessage]);

  /**
   * This method switch the Chat popup from left to right or right to left
   */
  const handleSwitchButtonClick = useCallback(() => {
    setSide(side === 'left' ? 'right' : 'left');
  }, [setSide, side]);

  // TODO: [P2] Currently, we cannot unmount Web Chat from DOM when it is minimized.
  //       Today, if we unmount it, Web Chat will call disconnect on DirectLineJS object.
  //       When minimized, we still want to maintain that connection while the UI is gone.
  //       This is related to https://github.com/microsoft/BotFramework-WebChat/issues/2750.

  return (
    <div className="minimizable-web-chat">
      {minimized && (
        <button
          className="maximize ltr:right-[1.875rem] rtl:left-[1.875rem]"
          onClick={handleMaximizeButtonClick}
        >
          <ChatBotIcon />
          {newMessage && (
            <span className="ms-Icon ms-Icon--CircleShapeSolid red-dot" />
          )}
        </button>
      )}
      {loaded && (
        <div
          className={`${side === 'left' ? 'chat-box left' : 'chat-box right'} ${
            minimized ? 'hide' : ''
          }`}
        >
          <header>
            <p className="title">{t(LabelConstants.HOW_CAN_I_HELP)}</p>
            <div className="filler" />
            <button className="switch" onClick={handleSwitchButtonClick}>
              <span className="ms-Icon ms-Icon--Switch" />
            </button>
            <button className="minimize" onClick={handleMinimizeButtonClick}>
              <span className="ms-Icon ms-Icon--ChromeMinimize" />
            </button>
          </header>
          {typeof window !== 'undefined' && (
            <WebChat
              className="react-web-chat"
              onFetchToken={handleFetchToken}
              store={store}
              token={token!}
            />
          )}
        </div>
      )}
    </div>
  );
};

export default ChatBot;
